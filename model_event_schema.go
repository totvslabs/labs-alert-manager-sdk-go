/*
alertmanager

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package labs_alert_manager_client

import (
	"encoding/json"
	"time"
)

// checks if the EventSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSchema{}

// EventSchema struct for EventSchema
type EventSchema struct {
	// Event souce
	ClientSource string `json:"client_source"`
	// Client uuid. This is the id defined by client app
	ClientUuid string `json:"client_uuid"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Event data
	Data map[string]interface{} `json:"data"`
	// Event type
	EventType string `json:"event_type"`
	// Id
	Id string `json:"id"`
	// Event labels
	Labels map[string]interface{} `json:"labels"`
	// Event schema version. Can be used by client app to know how to parse the event
	SchemaVersion string `json:"schema_version"`
	// Event severity
	Severity string `json:"severity"`
	// Event status, Received, Stored
	Status string `json:"status"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewEventSchema instantiates a new EventSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSchema(clientSource string, clientUuid string, data map[string]interface{}, eventType string, id string, labels map[string]interface{}, schemaVersion string, severity string, status string) *EventSchema {
	this := EventSchema{}
	this.ClientSource = clientSource
	this.ClientUuid = clientUuid
	this.Data = data
	this.EventType = eventType
	this.Id = id
	this.Labels = labels
	this.SchemaVersion = schemaVersion
	this.Severity = severity
	this.Status = status
	return &this
}

// NewEventSchemaWithDefaults instantiates a new EventSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSchemaWithDefaults() *EventSchema {
	this := EventSchema{}
	return &this
}

// GetClientSource returns the ClientSource field value
func (o *EventSchema) GetClientSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSource
}

// GetClientSourceOk returns a tuple with the ClientSource field value
// and a boolean to check if the value has been set.
func (o *EventSchema) GetClientSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSource, true
}

// SetClientSource sets field value
func (o *EventSchema) SetClientSource(v string) {
	o.ClientSource = v
}

// GetClientUuid returns the ClientUuid field value
func (o *EventSchema) GetClientUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientUuid
}

// GetClientUuidOk returns a tuple with the ClientUuid field value
// and a boolean to check if the value has been set.
func (o *EventSchema) GetClientUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientUuid, true
}

// SetClientUuid sets field value
func (o *EventSchema) SetClientUuid(v string) {
	o.ClientUuid = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EventSchema) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSchema) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EventSchema) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *EventSchema) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetData returns the Data field value
func (o *EventSchema) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *EventSchema) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *EventSchema) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetEventType returns the EventType field value
func (o *EventSchema) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *EventSchema) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *EventSchema) SetEventType(v string) {
	o.EventType = v
}

// GetId returns the Id field value
func (o *EventSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventSchema) SetId(v string) {
	o.Id = v
}

// GetLabels returns the Labels field value
func (o *EventSchema) GetLabels() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *EventSchema) GetLabelsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *EventSchema) SetLabels(v map[string]interface{}) {
	o.Labels = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *EventSchema) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *EventSchema) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *EventSchema) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetSeverity returns the Severity field value
func (o *EventSchema) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *EventSchema) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *EventSchema) SetSeverity(v string) {
	o.Severity = v
}

// GetStatus returns the Status field value
func (o *EventSchema) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *EventSchema) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *EventSchema) SetStatus(v string) {
	o.Status = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *EventSchema) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSchema) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *EventSchema) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *EventSchema) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o EventSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["client_source"] = o.ClientSource
	toSerialize["client_uuid"] = o.ClientUuid
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	toSerialize["data"] = o.Data
	toSerialize["event_type"] = o.EventType
	toSerialize["id"] = o.Id
	toSerialize["labels"] = o.Labels
	toSerialize["schema_version"] = o.SchemaVersion
	toSerialize["severity"] = o.Severity
	toSerialize["status"] = o.Status
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableEventSchema struct {
	value *EventSchema
	isSet bool
}

func (v NullableEventSchema) Get() *EventSchema {
	return v.value
}

func (v *NullableEventSchema) Set(val *EventSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSchema(val *EventSchema) *NullableEventSchema {
	return &NullableEventSchema{value: val, isSet: true}
}

func (v NullableEventSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


