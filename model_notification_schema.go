/*
alertmanager

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package labs_alert_manager_client

import (
	"encoding/json"
	"time"
)

// checks if the NotificationSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationSchema{}

// NotificationSchema struct for NotificationSchema
type NotificationSchema struct {
	// Notification Client UUID
	ClientUuid string `json:"client_uuid"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// List of notification events
	Events []string `json:"events,omitempty"`
	FirstEvent NullableTime `json:"first_event,omitempty"`
	// Id
	Id string `json:"id"`
	// Quantity notification retries
	Retries NullableInt32 `json:"retries,omitempty"`
	// Notification status
	Status string `json:"status"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewNotificationSchema instantiates a new NotificationSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSchema(clientUuid string, id string, status string) *NotificationSchema {
	this := NotificationSchema{}
	this.ClientUuid = clientUuid
	this.Id = id
	this.Status = status
	return &this
}

// NewNotificationSchemaWithDefaults instantiates a new NotificationSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSchemaWithDefaults() *NotificationSchema {
	this := NotificationSchema{}
	return &this
}

// GetClientUuid returns the ClientUuid field value
func (o *NotificationSchema) GetClientUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientUuid
}

// GetClientUuidOk returns a tuple with the ClientUuid field value
// and a boolean to check if the value has been set.
func (o *NotificationSchema) GetClientUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientUuid, true
}

// SetClientUuid sets field value
func (o *NotificationSchema) SetClientUuid(v string) {
	o.ClientUuid = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *NotificationSchema) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSchema) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *NotificationSchema) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *NotificationSchema) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEvents returns the Events field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationSchema) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSchema) GetEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *NotificationSchema) HasEvents() bool {
	if o != nil && IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *NotificationSchema) SetEvents(v []string) {
	o.Events = v
}

// GetFirstEvent returns the FirstEvent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationSchema) GetFirstEvent() time.Time {
	if o == nil || IsNil(o.FirstEvent.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FirstEvent.Get()
}

// GetFirstEventOk returns a tuple with the FirstEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSchema) GetFirstEventOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstEvent.Get(), o.FirstEvent.IsSet()
}

// HasFirstEvent returns a boolean if a field has been set.
func (o *NotificationSchema) HasFirstEvent() bool {
	if o != nil && o.FirstEvent.IsSet() {
		return true
	}

	return false
}

// SetFirstEvent gets a reference to the given NullableTime and assigns it to the FirstEvent field.
func (o *NotificationSchema) SetFirstEvent(v time.Time) {
	o.FirstEvent.Set(&v)
}
// SetFirstEventNil sets the value for FirstEvent to be an explicit nil
func (o *NotificationSchema) SetFirstEventNil() {
	o.FirstEvent.Set(nil)
}

// UnsetFirstEvent ensures that no value is present for FirstEvent, not even an explicit nil
func (o *NotificationSchema) UnsetFirstEvent() {
	o.FirstEvent.Unset()
}

// GetId returns the Id field value
func (o *NotificationSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NotificationSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NotificationSchema) SetId(v string) {
	o.Id = v
}

// GetRetries returns the Retries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationSchema) GetRetries() int32 {
	if o == nil || IsNil(o.Retries.Get()) {
		var ret int32
		return ret
	}
	return *o.Retries.Get()
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationSchema) GetRetriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Retries.Get(), o.Retries.IsSet()
}

// HasRetries returns a boolean if a field has been set.
func (o *NotificationSchema) HasRetries() bool {
	if o != nil && o.Retries.IsSet() {
		return true
	}

	return false
}

// SetRetries gets a reference to the given NullableInt32 and assigns it to the Retries field.
func (o *NotificationSchema) SetRetries(v int32) {
	o.Retries.Set(&v)
}
// SetRetriesNil sets the value for Retries to be an explicit nil
func (o *NotificationSchema) SetRetriesNil() {
	o.Retries.Set(nil)
}

// UnsetRetries ensures that no value is present for Retries, not even an explicit nil
func (o *NotificationSchema) UnsetRetries() {
	o.Retries.Unset()
}

// GetStatus returns the Status field value
func (o *NotificationSchema) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NotificationSchema) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NotificationSchema) SetStatus(v string) {
	o.Status = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *NotificationSchema) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSchema) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *NotificationSchema) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *NotificationSchema) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o NotificationSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["client_uuid"] = o.ClientUuid
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.FirstEvent.IsSet() {
		toSerialize["first_event"] = o.FirstEvent.Get()
	}
	toSerialize["id"] = o.Id
	if o.Retries.IsSet() {
		toSerialize["retries"] = o.Retries.Get()
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableNotificationSchema struct {
	value *NotificationSchema
	isSet bool
}

func (v NullableNotificationSchema) Get() *NotificationSchema {
	return v.value
}

func (v *NullableNotificationSchema) Set(val *NotificationSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSchema(val *NotificationSchema) *NullableNotificationSchema {
	return &NullableNotificationSchema{value: val, isSet: true}
}

func (v NullableNotificationSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


